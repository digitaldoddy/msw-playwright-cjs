import { LifeCycleEventsMap, RequestHandler, SetupApi, WebSocketHandler } from "msw";
import { Page, PlaywrightTestArgs, PlaywrightWorkerArgs, TestFixture } from "@playwright/test";

//#region src/index.d.ts
interface CreateNetworkFixtureArgs {
  initialHandlers: Array<RequestHandler | WebSocketHandler>;
}
/**
 * Creates a fixture that controls the network in your tests.
 *
 * @note The returned fixture already has the `auto` option set to `true`.
 *
 * **Usage**
 * ```ts
 * import { test as testBase } from '@playwright/test'
 * import { createNetworkFixture, type WorkerFixture } from '@msw/playwright'
 *
 * interface Fixtures {
 *  network: WorkerFixture
 * }
 *
 * export const test = testBase.extend<Fixtures>({
 *   network: createNetworkFixture()
 * })
 * ```
 */
declare function createNetworkFixture(args?: CreateNetworkFixtureArgs): [TestFixture<NetworkFixture, PlaywrightTestArgs & PlaywrightWorkerArgs>, {
  auto: boolean;
}];
declare class NetworkFixture extends SetupApi<LifeCycleEventsMap> {
  #private;
  constructor(args: {
    page: Page;
    initialHandlers: Array<RequestHandler | WebSocketHandler>;
  });
  start(): Promise<void>;
  stop(): Promise<void>;
  private getPageUrl;
}
//#endregion
export { CreateNetworkFixtureArgs, NetworkFixture, createNetworkFixture };